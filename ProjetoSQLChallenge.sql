-- ===============================================
-- Script Completo: Banco de Dados Oracle
-- ===============================================

-- =============================
-- Criação de Tabelas
-- =============================
CREATE TABLE pais (
    id_pais INT PRIMARY KEY,
    nm_pais VARCHAR2(50) NOT NULL
);

CREATE TABLE estado (
    id_estado INT PRIMARY KEY,
    nm_estado VARCHAR2(50) NOT NULL,
    id_pais INT NOT NULL,
    CONSTRAINT estado_pais_fk FOREIGN KEY (id_pais)
        REFERENCES pais(id_pais)
);


CREATE TABLE cidade (
    id_cidade INT PRIMARY KEY,
    nm_cidade VARCHAR2(50) NOT NULL,
    id_estado INT NOT NULL,
    CONSTRAINT cidade_estado_fk FOREIGN KEY (id_estado)
        REFERENCES estado(id_estado)
);

CREATE TABLE bairro (
    id_bairro INT PRIMARY KEY,
    nm_bairro VARCHAR2(50) NOT NULL,
    id_cidade INT NOT NULL,
    CONSTRAINT bairro_cidade_fk FOREIGN KEY (id_cidade)
        REFERENCES cidade(id_cidade)
);

CREATE TABLE endereco (
    id_endereco INT PRIMARY KEY,
    nm_rua VARCHAR2(100) NOT NULL,
    nr_numero VARCHAR2(10),
    id_bairro INT NOT NULL,
    CONSTRAINT endereco_bairro_fk FOREIGN KEY (id_bairro)
        REFERENCES bairro(id_bairro)
);

CREATE TABLE patio (
    id_patio INT PRIMARY KEY,
    nm_patio VARCHAR2(100) NOT NULL,
    id_endereco INT NOT NULL,
    CONSTRAINT patio_endereco_fk FOREIGN KEY (id_endereco)
        REFERENCES endereco(id_endereco)
);

CREATE TABLE operador (
    id_operador INT PRIMARY KEY,
    nm_operador VARCHAR2(100) NOT NULL,
    cargo_operador VARCHAR2(50),
    id_patio INT NOT NULL,
    CONSTRAINT operador_patio_fk FOREIGN KEY (id_patio)
        REFERENCES patio(id_patio)
);

CREATE TABLE modelo (
    id_modelo INT PRIMARY KEY,
    nm_modelo VARCHAR2(100) NOT NULL,
    mt_tipo VARCHAR2(50)
);

CREATE TABLE moto (
    id_moto INT PRIMARY KEY,
    mt_placa VARCHAR2(10) NOT NULL,
    mt_status VARCHAR2(20),
    id_modelo INT NOT NULL,
    CONSTRAINT moto_modelo_fk FOREIGN KEY (id_modelo)
        REFERENCES modelo(id_modelo)
);

CREATE TABLE manutencao (
    id_manutencao INT PRIMARY KEY,
    dt_manutencao DATE NOT NULL,
    ds_servico VARCHAR2(200),
    id_moto INT NOT NULL,
    CONSTRAINT manutencao_moto_fk FOREIGN KEY (id_moto)
        REFERENCES moto(id_moto)
);

CREATE TABLE setor (
    id_setor INT PRIMARY KEY,
    nm_setor VARCHAR2(100) NOT NULL,
    id_patio INT NOT NULL,
    CONSTRAINT setor_patio_fk FOREIGN KEY (id_patio)
        REFERENCES patio(id_patio)
);

CREATE TABLE mapa_setor (
    id_mapa INT PRIMARY KEY,
    ds_mapa VARCHAR2(200),
    id_setor INT NOT NULL,
    id_patio INT NOT NULL,
    CONSTRAINT mapa_setor_setor_fk FOREIGN KEY (id_setor)
        REFERENCES setor(id_setor),
    CONSTRAINT mapa_setor_patio_fk FOREIGN KEY (id_patio)
        REFERENCES patio(id_patio)
);

CREATE TABLE movimentacao (
    id_mov INT PRIMARY KEY,
    dt_mov DATE NOT NULL,
    id_moto INT NOT NULL,
    id_setor INT NOT NULL,
    id_operador_origem INT NOT NULL,
    id_operador_destino INT,
    CONSTRAINT mov_moto_fk FOREIGN KEY (id_moto) REFERENCES moto(id_moto),
    CONSTRAINT mov_setor_fk FOREIGN KEY (id_setor) REFERENCES setor(id_setor),
    CONSTRAINT mov_operador_ori_fk FOREIGN KEY (id_operador_origem) REFERENCES operador(id_operador),
    CONSTRAINT mov_operador_des_fk FOREIGN KEY (id_operador_destino) REFERENCES operador(id_operador)
);

-- ===============================================
-- Tabela de Auditoria
-- ===============================================
CREATE TABLE auditoria_movimentacao (
    id_auditoria INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    usuario VARCHAR2(100),
    operacao VARCHAR2(10),
    data_hora TIMESTAMP DEFAULT SYSTIMESTAMP,
    valores_old VARCHAR2(4000),
    valores_new VARCHAR2(4000)
);




-- ===============================================
-- Inserts de Dados
-- ===============================================
INSERT INTO pais VALUES (1, 'Brasil');

INSERT INTO estado VALUES (1, 'São Paulo', 1);
INSERT INTO estado VALUES (2, 'Rio de Janeiro', 1);

INSERT INTO cidade VALUES (1, 'São Paulo', 1);
INSERT INTO cidade VALUES (2, 'Campinas', 1);
INSERT INTO cidade VALUES (3, 'Rio de Janeiro', 2);

INSERT INTO bairro VALUES (1, 'Centro', 1);
INSERT INTO bairro VALUES (2, 'Jardins', 1);
INSERT INTO bairro VALUES (3, 'Botafogo', 3);

INSERT INTO endereco VALUES (1, 'Rua A', '100', 1);
INSERT INTO endereco VALUES (2, 'Rua B', '200', 2);
INSERT INTO endereco VALUES (3, 'Rua C', '300', 3);

INSERT INTO patio VALUES (1, 'Pátio Central', 1);
INSERT INTO patio VALUES (2, 'Pátio Jardins', 2);
INSERT INTO patio VALUES (3, 'Pátio Botafogo', 3);

INSERT INTO operador VALUES (1, 'João', 'Supervisor', 1);
INSERT INTO operador VALUES (2, 'Maria', 'Assistente', 1);
INSERT INTO operador VALUES (3, 'Carlos', 'Supervisor', 2);
INSERT INTO operador VALUES (4, 'Ana', 'Assistente', 2);
INSERT INTO operador VALUES (5, 'Pedro', 'Fiscal', 3);

INSERT INTO modelo VALUES (1, 'Mottu-Elite', 'Scooter');
INSERT INTO modelo VALUES (2, 'Mottu-Express', 'Scooter');
INSERT INTO modelo VALUES (3, 'Mottu-Cargo', 'Scooter');
INSERT INTO modelo VALUES (4, 'Mottu-Fiscal', 'Scooter');
INSERT INTO modelo VALUES (5, 'Mottu-Suporte', 'Scooter');

INSERT INTO moto VALUES (1, 'ABC1A23', 'Ativa', 1);
INSERT INTO moto VALUES (2, 'ABC1A24', 'Ativa', 2);
INSERT INTO moto VALUES (3, 'ABC1A25', 'Ativa', 3);
INSERT INTO moto VALUES (4, 'ABC1A26', 'Manutenção', 4);
INSERT INTO moto VALUES (5, 'ABC1A27', 'Ativa', 5);

INSERT INTO manutencao VALUES (1, SYSDATE, 'Troca de óleo', 4);

INSERT INTO setor VALUES (1, 'Entrada', 1);
INSERT INTO setor VALUES (2, 'Saída', 1);
INSERT INTO setor VALUES (3, 'Lavagem', 2);

INSERT INTO mapa_setor VALUES (1, 'Mapa Entrada', 1, 1);
INSERT INTO mapa_setor VALUES (2, 'Mapa Saída', 2, 1);
INSERT INTO mapa_setor VALUES (3, 'Mapa Lavagem', 3, 2);

INSERT INTO movimentacao VALUES (1, SYSDATE, 1, 1, 1, 2);
INSERT INTO movimentacao VALUES (2, SYSDATE, 2, 2, 1, 3);
INSERT INTO movimentacao VALUES (3, SYSDATE, 3, 1, 3, 4);
INSERT INTO movimentacao VALUES (4, SYSDATE, 4, 3, 4, 5);
INSERT INTO movimentacao VALUES (5, SYSDATE, 5, 2, 2, NULL);

-- ===============================================
-- Função 1: Formata MOVIMENTACAO em JSON
-- ===============================================
set serveroutput on;

CREATE OR REPLACE FUNCTION fn_formatar_mov_json (
    p_id_mov INT,
    p_dt_mov DATE,
    p_placa VARCHAR2,
    p_operador_origem VARCHAR2,
    p_operador_destino VARCHAR2,
    p_setor VARCHAR2
) RETURN VARCHAR2
IS
    v_json VARCHAR2(4000);
BEGIN
    v_json := '{' ||
              '"id_mov":"' || p_id_mov || '",' ||
              '"data":"' || TO_CHAR(p_dt_mov,'DD/MM/YYYY HH24:MI') || '",' ||
              '"placa":"' || p_placa || '",' ||
              '"operador_origem":"' || p_operador_origem || '",' ||
              '"operador_destino":"' || NVL(p_operador_destino,'null') || '",' ||
              '"setor":"' || p_setor || '"' ||
              '}';
    RETURN v_json;
EXCEPTION
    WHEN OTHERS THEN
        RETURN '{"erro":"Erro ao gerar JSON"}';
END;
/

-- ===============================================
-- Função 2: Valida status da moto
-- ===============================================
CREATE OR REPLACE FUNCTION fn_validar_status_moto (
    p_id_moto moto.id_moto%TYPE
) RETURN VARCHAR2
IS
    v_status moto.mt_status%TYPE;
    v_msg VARCHAR2(200);
BEGIN
    SELECT mt_status INTO v_status FROM moto WHERE id_moto = p_id_moto;

    IF v_status = 'Ativa' THEN
        v_msg := 'Moto ' || p_id_moto || ' liberada para movimentação.';
    ELSIF v_status = 'Manutenção' THEN
        v_msg := 'Moto ' || p_id_moto || ' está em manutenção. Operação não permitida.';
    ELSE
        v_msg := 'Status desconhecido para a moto ' || p_id_moto;
    END IF;

    RETURN v_msg;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Moto não encontrada (ID ' || p_id_moto || ')';
    WHEN TOO_MANY_ROWS THEN
        RETURN 'Mais de um registro encontrado para a moto ' || p_id_moto;
    WHEN OTHERS THEN
        RETURN 'Erro inesperado ao validar status da moto ' || p_id_moto;
END;
/

-- ===============================================
-- Procedure 1: Lista movimentações em JSON
-- ===============================================
CREATE OR REPLACE PROCEDURE prc_listar_mov_json
IS
    CURSOR c_mov IS
        SELECT m.id_mov,
               m.dt_mov,
               mt.mt_placa,
               op1.nm_operador AS operador_origem,
               op2.nm_operador AS operador_destino,
               s.nm_setor
        FROM movimentacao m
        JOIN moto mt ON m.id_moto = mt.id_moto
        JOIN operador op1 ON m.id_operador_origem = op1.id_operador
        LEFT JOIN operador op2 ON m.id_operador_destino = op2.id_operador
        JOIN setor s ON m.id_setor = s.id_setor;
    v_json VARCHAR2(4000);
BEGIN
    FOR r IN c_mov LOOP
        v_json := fn_formatar_mov_json(r.id_mov, r.dt_mov, r.mt_placa, r.operador_origem, r.operador_destino, r.nm_setor);
        DBMS_OUTPUT.PUT_LINE(v_json);
    END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nenhuma movimentação encontrada.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Mais de um registro retornado no cursor.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado ao listar movimentações.');
END;
/

-- ===============================================
-- Procedure 2: Soma manual por categorias (setor e operador origem)
-- ===============================================
CREATE OR REPLACE PROCEDURE prc_somar_movimentacao
IS
    CURSOR c_dados IS
        SELECT id_setor, id_operador_origem, id_moto
        FROM movimentacao
        ORDER BY id_setor, id_operador_origem;
    v_setor movimentacao.id_setor%TYPE := NULL;
    v_operador movimentacao.id_operador_origem%TYPE := NULL;
    v_total_setor NUMBER := 0;
    v_total_geral NUMBER := 0;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Setor | Operador | Quantidade de Motos');

    FOR r IN c_dados LOOP
        -- Subtotal por setor
        IF v_setor IS NULL THEN
            v_setor := r.id_setor;
            v_operador := r.id_operador_origem;
        ELSIF v_setor != r.id_setor THEN
            DBMS_OUTPUT.PUT_LINE('Subtotal Setor ' || v_setor || ': ' || v_total_setor);
            v_total_setor := 0;
            v_setor := r.id_setor;
            v_operador := r.id_operador_origem;
        END IF;

        -- Quantidade por operador
        IF v_operador != r.id_operador_origem THEN
            v_operador := r.id_operador_origem;
        END IF;

        DBMS_OUTPUT.PUT_LINE(r.id_setor || ' | ' || r.id_operador_origem || ' | 1');

        v_total_setor := v_total_setor + 1;
        v_total_geral := v_total_geral + 1;
    END LOOP;

    -- Total do último setor
    IF v_setor IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Subtotal Setor ' || v_setor || ': ' || v_total_setor);
    END IF;

    DBMS_OUTPUT.PUT_LINE('Total Geral: ' || v_total_geral);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nenhuma movimentação encontrada.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Erro: Mais de um registro retornado no cursor.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro inesperado ao somar movimentações.');
END;
/

-- ===============================================
-- Trigger de Auditoria
-- ===============================================
CREATE OR REPLACE TRIGGER trg_auditoria_mov
AFTER INSERT OR UPDATE OR DELETE ON movimentacao
FOR EACH ROW
DECLARE
    v_usuario VARCHAR2(100);
BEGIN
    v_usuario := SYS_CONTEXT('USERENV','SESSION_USER');

    IF INSERTING THEN
        INSERT INTO auditoria_movimentacao(usuario, operacao, valores_new)
        VALUES (
            v_usuario,
            'INSERT',
            'ID_MOV=' || :NEW.id_mov || 
            ', ID_MOTO=' || :NEW.id_moto || 
            ', ID_SETOR=' || :NEW.id_setor || 
            ', ID_OPERADOR_ORIGEM=' || :NEW.id_operador_origem || 
            ', ID_OPERADOR_DESTINO=' || NVL(TO_CHAR(:NEW.id_operador_destino), 'null')
        );
    ELSIF UPDATING THEN
        INSERT INTO auditoria_movimentacao(usuario, operacao, valores_old, valores_new)
        VALUES (
            v_usuario,
            'UPDATE',
            'ID_MOV=' || :OLD.id_mov || 
            ', ID_MOTO=' || :OLD.id_moto || 
            ', ID_SETOR=' || :OLD.id_setor || 
            ', ID_OPERADOR_ORIGEM=' || :OLD.id_operador_origem || 
            ', ID_OPERADOR_DESTINO=' || NVL(TO_CHAR(:OLD.id_operador_destino), 'null'),
            'ID_MOV=' || :NEW.id_mov || 
            ', ID_MOTO=' || :NEW.id_moto || 
            ', ID_SETOR=' || :NEW.id_setor || 
            ', ID_OPERADOR_ORIGEM=' || :NEW.id_operador_origem || 
            ', ID_OPERADOR_DESTINO=' || NVL(TO_CHAR(:NEW.id_operador_destino), 'null')
        );
    ELSIF DELETING THEN
        INSERT INTO auditoria_movimentacao(usuario, operacao, valores_old)
        VALUES (
            v_usuario,
            'DELETE',
            'ID_MOV=' || :OLD.id_mov || 
            ', ID_MOTO=' || :OLD.id_moto || 
            ', ID_SETOR=' || :OLD.id_setor || 
            ', ID_OPERADOR_ORIGEM=' || :OLD.id_operador_origem || 
            ', ID_OPERADOR_DESTINO=' || NVL(TO_CHAR(:OLD.id_operador_destino), 'null')
        );
    END IF;
END;
/



-- ===============================================
-- Testes
-- ===============================================
-- Habilitar DBMS_OUTPUT
SET SERVEROUTPUT ON;

-- Teste Procedure 1 (JSON)
BEGIN
    prc_listar_mov_json;
END;
/

-- Teste Procedure 2 (Somatório)
BEGIN
    prc_somar_movimentacao;
END;
/

-- Teste Função 2 (Validação Status Moto)
BEGIN
    DBMS_OUTPUT.PUT_LINE(fn_validar_status_moto(1));
    DBMS_OUTPUT.PUT_LINE(fn_validar_status_moto(4));
END;
/



-- INSERT

INSERT INTO movimentacao(id_mov, dt_mov, id_moto, id_setor, id_operador_origem, id_operador_destino)
VALUES (6, SYSDATE, 1, 1, 2, 3);


-- UPDATE
UPDATE movimentacao SET id_operador_destino = 3 WHERE id_mov = 10;

-- DELETE
DELETE FROM movimentacao WHERE id_mov = 10;

-- Conferir auditoria
SELECT * FROM auditoria_movimentacao ORDER BY data_hora DESC;

-- Visualizar Auditoria
SELECT * FROM auditoria_movimentacao;

DROP TABLE movimentacao CASCADE CONSTRAINTS;
DROP TABLE mapa_setor CASCADE CONSTRAINTS;
DROP TABLE setor CASCADE CONSTRAINTS;
DROP TABLE manutencao CASCADE CONSTRAINTS;
DROP TABLE moto CASCADE CONSTRAINTS;
DROP TABLE modelo CASCADE CONSTRAINTS;
DROP TABLE operador CASCADE CONSTRAINTS;
DROP TABLE patio CASCADE CONSTRAINTS;
DROP TABLE endereco CASCADE CONSTRAINTS;
DROP TABLE bairro CASCADE CONSTRAINTS;
DROP TABLE cidade CASCADE CONSTRAINTS;
DROP TABLE estado CASCADE CONSTRAINTS;
DROP TABLE pais CASCADE CONSTRAINTS;
DROP TABLE auditoria_movimentacao CASCADE CONSTRAINTS;


